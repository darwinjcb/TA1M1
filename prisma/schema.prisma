// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Estudiante {
  id            Int           @id @default(autoincrement())
  codigo        String        @unique
  nombre        String
  correo        String?       @unique
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
  inscripciones Inscripcion[]
}

model Profesor {
  id            Int      @id @default(autoincrement())
  nombre        String
  correo        String?  @unique
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  cursos        Curso[]
  titulos       Titulo[]
}

model Titulo {
  id          Int      @id @default(autoincrement())
  profesorId  Int
  nombre      String
  institucion String?
  anio        Int?
  profesor    Profesor @relation(fields: [profesorId], references: [id], onDelete: Cascade)

  @@index([profesorId])
}

model Carrera {
  id            Int       @id @default(autoincrement())
  nombre        String    @unique
  creadoEn      DateTime  @default(now())
  actualizadoEn DateTime  @updatedAt
  materias      Materia[]
}

model Materia {
  id            Int      @id @default(autoincrement())
  carreraId     Int
  nombre        String
  codigo        String   @unique
  creadoEn      DateTime @default(now())
  actualizadoEn DateTime @updatedAt
  carrera       Carrera  @relation(fields: [carreraId], references: [id], onDelete: Restrict)
  cursos        Curso[]

  @@index([carreraId])
}

model Curso {
  id            Int           @id @default(autoincrement())
  materiaId     Int
  profesorId    Int
  periodo       String // ej: "2025-1"
  seccion       String? // ej: "A"
  creadoEn      DateTime      @default(now())
  actualizadoEn DateTime      @updatedAt
  materia       Materia       @relation(fields: [materiaId], references: [id], onDelete: Restrict)
  profesor      Profesor      @relation(fields: [profesorId], references: [id], onDelete: Restrict)
  inscripciones Inscripcion[]

  @@unique([materiaId, periodo, seccion])
  @@index([materiaId])
  @@index([profesorId])
}

model Inscripcion {
  id           Int        @id @default(autoincrement())
  estudianteId Int
  cursoId      Int
  fecha        DateTime   @default(now())
  estado       String? // "ACTIVA", "RETIRADA", etc.
  estudiante   Estudiante @relation(fields: [estudianteId], references: [id], onDelete: Cascade)
  curso        Curso      @relation(fields: [cursoId], references: [id], onDelete: Cascade)

  @@unique([estudianteId, cursoId])
  @@index([cursoId])
  @@index([estudianteId])
}
